<template>
	<div>
		<!-- 横向滚动顶部选顶卡 -->
		<sum-tabbar :tabIndex="tabIndex" :tabBars="tabBars" @tabchange="tabChange"></sum-tabbar>

		<!-- 横向滚动列表 -->
		<slider class="flex-1" :index="tabIndex" :infinite="false" @change="sliderChange">
			<list :show-scrollbar="false" v-for="(list, listIndex) in newsitems" :key="listIndex">
				<!-- 下拉刷新 -->
				<refresh class="w-100 flex-row j-center a-center" style="height: 80px;" @refresh="refresh" @pullingdown="pullingdown" :display="list.refreshShow">
					<text class="font-sm text-muted">{{ list.refreshText }}</text>
				</refresh>

				<!-- 首页模板 -->
				<template v-if="tabBars[listIndex].template === 'index'">
					<cell v-for="(listItem, ItemIndex) in list.data" :key="ItemIndex">
						<!-- 轮播图组件 -->
						<sum-slider v-if="listItem.type === 'swiper'" :swipers="listItem.data" />
						<template v-if="listItem.type === 'indexnavs'">
							<!-- 图标分类组件 -->
							<sum-index-navs :resdata="listItem.data" />
							<!-- 封装全局分割线 -->
							<divider />
						</template>

						<!-- 大图广告位 -->
						<sum-one-adv v-if="listItem.type === 'oneAdv'" :item="listItem.data" />
						<!-- 公共列表组件 -->
						<div class="w-100" v-if="listItem.type === 'list'">
							<div class="p-2 border-bottom"><text class="text-dark font-md font-weight">标题标题</text></div>
							<div class="row w-100">
								<block v-for="(item, index) in listItem.data" :key="index"><commonList :item="item" :index="index" /></block>
							</div>
						</div>
					</cell>
				</template>
				<!-- 专题页 -->
				<template v-else-if="tabBars[listIndex].template === 'special'">
					<cell v-for="(listItem, ItemIndex) in list.data" :key="ItemIndex">
						<!-- 轮播图组件 -->
						<sum-slider v-if="listItem.type === 'swiper'" :swipers="listItem.data" />
						<template v-if="listItem.type === 'indexnavs'">
							<!-- 图标分类组件 -->
							<sum-index-navs :resdata="listItem.data" />
							<!-- 封装全局分割线 -->
							<divider />
						</template>

						<!-- 大图广告位 -->
						<sum-one-adv v-if="listItem.type === 'oneAdv'" :item="listItem.data" />
						<!-- 公共列表组件 -->
						<div class="row w-100" v-if="listItem.type === 'list'">
							<block v-for="(item, index) in listItem.data" :key="index"><commonList :item="item" :index="index" /></block>
						</div>
					</cell>
				</template>

				<!-- 上拉加载 -->
				<loading class="w-100 j-center a-center" style="height: 70px;" @loading="onLoading" :display="list.loadingShow">
					<text class="text-muted font-sm">Loading...</text>
				</loading>
			</list>
		</slider>
	</div>
</template>

<script>
import sumSlider from '@/components/index/nvue/sum-slider.nvue';
import sumIndexNavs from '@/components/index/nvue/sum-index-navs.nvue';
import divider from '@/components/common/divider.nvue';
import sumOneAdv from '@/components/index/nvue/sum-one-adv.nvue';
import commonList from '@/components/common/common-list.nvue';
import sumTabbar from '@/components/index/nvue/sum-tabbar.nvue';

//获取当前窗口对象
const currentWebview = plus.webview.currentWebview();
export default {
	components: {
		sumTabbar,
		sumSlider,
		sumIndexNavs,
		divider,
		sumOneAdv,
		commonList
	},
	data() {
		return {
			tabIndex: 0,
			tabBars: [],
			newsitems: []
		};
	},
	created() {
		//监听当前端口显示
		currentWebview.addEventListener('show', e => {
			console.log('indexShow');
		});

		// 初始化事件
		this.__init();
	},
	//监听点击搜索框
	onNavigationBarSearchInputClicked() {
		uni.navigateTo({
			url: '../search/search'
		});
	},
	beforeDestroy() {
		//移除监听事件
		currentWebview.addEventListener('show', e => {});
	},
	methods: {
		//初始化
		async __init() {
			// Await
			let [error, result] = await uni.request({
				url: 'http://ceshi3.dishait.cn/api/index_category/data',
				method: 'GET'
			});
			//错误
			if (error) {
				return uni.showToast({
					title: error.errMsg,
					icon: 'none'
				});
			}
			//失败
			if (result.statusCode !== 200) {
				return uni.showToast({
					title: result.data.msg,
					icon: 'none'
				});
			}
			//成功
			let data = result.data.data;
			//初始化tabbars
			this.tabBars = data.category;
			//初始化页面
			this.newsitems = this.setNewsitems(data);
		},
		//加载数据、刷新数据
		async addData(callback = false, refresh = false) {
			//拿到当前索引
			let e = this.tabIndex;
			//拿到当前分类id
			let id = this.tabBars[e].id;
			//拿到当前分类页数
			let page = !refresh ? Math.ceil(this.newsitems[e].data.length / 5) + 1 : 1;

			let [error, result] = await uni.request({
				url: 'http://ceshi3.dishait.cn/api/index_category/' + id + '/data/' + page,
				method: 'GET'
			});
			//错误
			if (error) {
				return uni.showToast({
					title: error.errMsg,
					icon: 'none'
				});
			}
			//失败
			if (result.statusCode !== 200) {
				return uni.showToast({
					title: result.data.msg,
					icon: 'none'
				});
			}
			//成功
			let data = result.data.data;
			//赋值渲染
			this.newsitems[e].data = !refresh ? [...this.newsitems[e].data, ...data] : [...data];

			//执行回调函数
			if (typeof callback === 'function') {
				callback();
			}
			//没有更多数据
			if (data.length < 5) {
				this.newsitems[e].loadingText = '没有更多了';
				return;
			}
		},
		// 初始化页面
		setNewsitems(e) {
			let ary = [];
			//拿到 tabbars 的长度，根据长度生成页面
			let tablength = this.tabBars.length;
			for (let i = 0; i < tablength; i++) {
				let aryItem = {
					refreshShow: 'hide',
					refreshText: '下拉刷新...',
					loadingShow: 'hide',
					data: []
				};
				//给首面页面添加数据
				if (this.tabBars[i].template === 'index') {
					aryItem.data = e.data;
				}
				ary.push(aryItem);
			}
			return ary;
		},
		//点击选项卡事件
		tabChange(index) {
			this.tabIndex = index;
		},
		//监听横向滚动列表事件
		sliderChange(e) {
			this.tabIndex = e.index;
			this.addData();
		},
		// 上拉加载事件
		onLoading() {
			// 存储当前索引
			var index = this.tabIndex;
			this.newsitems[index].loadingShow = 'show';

			// 没有更多了
			if (this.newsitems[index].loadingText === '没有更多了') {
				uni.showToast({ title: '没有更多了', icon: 'none' });
				this.newsitems[index].loadingShow = 'hide';
				return;
			}
			// 加载数据
			this.addData(() => {
				uni.showToast({ title: '加载成功', icon: 'none' });
				this.newsitems[index].loadingShow = 'hide';
				//需实机测试上接刷实
				// if (this.newsitems[index].loadingText === '没有更多了') {
				// 	uni.showToast({ title: '没有更多了', icon: 'none' });
				// 	this.newsitems[index].loadingShow = 'hide';
				// }
			});
		},
		// 执行刷新
		refresh(e) {
			// 存储当前索引
			var index = this.tabIndex;
			this.newsitems[index].refreshShow = 'show';
			this.newsitems[index].refreshText = '正在刷新...';
			// 请求刷新数据
			this.addData(() => {
				uni.showToast({ title: '下拉刷新成功', icon: 'none' });
				this.newsitems[index].refreshShow = 'hide';
				this.newsitems[index].refreshText = '下拉可以刷新';
			}, true);
		},
		// 判断下拉刷新状态
		pullingdown(e) {
			this.refreshText = e.pullingDistance > e.viewHeight ? '释放就能刷新咯' : '下拉可以刷新';
		}
	}
};
</script>
<style src="@/common/zcm-main-nvue.css"></style>
<style></style>
